
# To build (from repo root): docker build --tag foundationstereo -f docker/dockerfile .
# By default it includes the weights from the largest model (23-51-11): https://github.com/NVlabs/FoundationStereo?tab=readme-ov-file#model-weights
# To build with different weights: docker build --build-arg PRETRAINED_WEIGHTS="onnx" --tag foundationstereo -f ./docker/dockerfile .
# To run: docker run --gpus all -it foundationstereo /bin/bash
# Then you can run the demo script or whatever you want

ARG CUDA_VERSION=12.8.1
ARG PRETRAINED_WEIGHTS="23-51-11"

# https://github.com/anaconda/docker-images/blob/main/miniconda3/debian/Dockerfile
FROM continuumio/miniconda3 AS miniconda

FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu24.04 AS builder

ENV TZ=US/Pacific
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update --fix-missing && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    apt-utils \
    build-essential \
    bzip2 \
    ca-certificates \
    checkinstall \
    cmake \
    cmake-curses-gui \
    curl \
    doxygen \
    ffmpeg \
    g++ \
    gcc \
    gdb \
    gfortran \
    git \
    htop \
    iputils-ping \
    libassimp-dev \
    libavcodec-dev \
    libavformat-dev \
    libblas-dev \
    libboost-all-dev \
    libccd-dev \
    libcgal-dev \
    libdc1394-dev \
    libfaac-dev \
    libflann-dev \
    libgflags-dev \
    libglew-dev \
    libgoogle-glog-dev \
    libgphoto2-dev \
    libgtk2.0-dev \
    libhdf5-dev \
    libjpeg8-dev \
    liblapack-dev \
    libmp3lame-dev \
    libnoise-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libproj-dev \
    libprotobuf-dev \
    libswscale-dev \
    libtbb-dev \
    libtheora-dev \
    libtiff5-dev \
    libtinyxml2-dev \
    libturbojpeg-dev \
    libv4l-dev \
    libvorbis-dev \
    libxine2-dev \
    libxvidcore-dev \
    net-tools \
    openexr \
    p7zip-full \
    p7zip-rar \
    parallel \
    pkg-config \
    proj-data \
    protobuf-compiler \
    rclone \
    rsync \
    tmux \
    v4l-utils \
    vim \
    wget \
    x264 \
    xvfb \
    yasm \
    zlib1g-dev \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY ./docker/environment.yml /tmp/environment.yml

# setup conda
COPY --from=miniconda /opt/conda /opt/conda
# Put conda in path so we can use conda activate
ENV PATH=/opt/conda/bin:$PATH

# install python and all dependencies
# install flash attention separately because it requires a committed installed pytorch
# the conda environment name is "foundation_stereo" and is defined in the environment.yml file
RUN conda env create --file /tmp/environment.yml && \
    conda run -n foundation_stereo pip install --no-cache-dir flash-attn && \
    conda clean --all

### Final image
FROM nvidia/cuda:${CUDA_VERSION}-runtime-ubuntu24.04

ARG PRETRAINED_WEIGHTS

# otherwise apt-get will ask for timezone input
ENV TZ=US/Pacific
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libblas-dev \
    libdc1394-dev \
    libfaac-dev \
    libflann-dev \
    libgflags-dev \
    libglew-dev \
    libgoogle-glog-dev \
    libgtk2.0-dev \
    libhdf5-dev \
    libjpeg8-dev \
    liblapack-dev \
    libmp3lame-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libproj-dev \
    libswscale-dev \
    libtbb-dev \
    libtheora-dev \
    libtiff5-dev \
    libtinyxml2-dev \
    libturbojpeg-dev \
    libv4l-dev \
    libvorbis-dev \
    libxvidcore-dev \
    openexr \
    proj-data \
    v4l-utils \
    wget \
    x264 \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

COPY --from=builder /opt/conda /opt/conda

# Add Conda to PATH so we can use it
ENV PATH=/opt/conda/bin:$PATH

COPY ./docker/download_weights.py /tmp/download_weights.py
RUN conda run -n foundation_stereo python /tmp/download_weights.py --weights ${PRETRAINED_WEIGHTS} && rm -rf /tmp/download_weights.py

COPY . /FoundationStereo
WORKDIR /FoundationStereo

# When commands are executed, they will be run in the conda environment
ENTRYPOINT ["sh", "-c", ". /opt/conda/etc/profile.d/conda.sh && conda activate foundation_stereo && exec \"$@\"", "--"]
